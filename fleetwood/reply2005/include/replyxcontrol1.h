/****************************************************************************
**
** Namespace ReplyXControl1 generated by dumpcpp from type library
** ocx\Reply2005.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_REPLYXCONTROL1_H
#define QAX_DUMPCPP_REPLYXCONTROL1_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef REPLYXCONTROL1_EXPORT
#define REPLYXCONTROL1_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace ReplyXControl1 {

    enum TxrstDataMode {
        modeSerial              = 0,
        modeTimestamp           = 1
    };

    enum TxrstKeypadConfigurationMode {
        kpcManual               = 0,
        kpcBase                 = 1
    };

    enum TxrstKeypadPowerLevel {
        powLow                  = 0,
        powLowMid               = 1,
        powMidHigh              = 2,
        powHigh                 = 3
    };

    enum TxrstReplyModel {
        mNone                   = 0,
        mReply                  = 1,
        mReplyEU                = 2,
        mReplyEZ                = 3,
        mReply2005              = 4,
        mAutoDetect             = 5
    };

// forward declarations
    enum TxrstReplyModel;
    enum TxrstKeypadPowerLevel;
    enum TxrstDataMode;
    enum TxrstKeypadConfigurationMode;
    enum TxrstReplyModel;
    enum TxrstKeypadPowerLevel;
    enum TxrstDataMode;
    enum TxrstKeypadConfigurationMode;

class REPLYXCONTROL1_EXPORT IReplyX : public QAxObject
{
public:
    IReplyX(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property BaseChannel
    */
    inline int BaseChannel() const; //Returns the value of BaseChannel
    inline void SetBaseChannel(int value); //Sets the value of the BaseChannel property

    /*
    Property BaseSerialNumber
    */
    inline QString BaseSerialNumber() const; //Returns the value of BaseSerialNumber

    /*
    Property BaseVersion
    */
    inline QString BaseVersion() const; //Returns the value of BaseVersion

    /*
    Property CommunicationTimeout
    */
    inline int CommunicationTimeout() const; //Returns the value of CommunicationTimeout
    inline void SetCommunicationTimeout(int value); //Sets the value of the CommunicationTimeout property

    /*
    Property Connected
    */
    inline bool Connected() const; //Returns the value of Connected

    /*
    Property ControlVersion
    */
    inline QString ControlVersion() const; //Returns the value of ControlVersion

    /*
    Property DebugEventsEnabled
    */
    inline bool DebugEventsEnabled() const; //Returns the value of DebugEventsEnabled
    inline void SetDebugEventsEnabled(bool value); //Sets the value of the DebugEventsEnabled property

    /*
    Property ErrorEventsEnabled
    */
    inline bool ErrorEventsEnabled() const; //Returns the value of ErrorEventsEnabled
    inline void SetErrorEventsEnabled(bool value); //Sets the value of the ErrorEventsEnabled property

    /*
    Property ErrorExceptionsEnabled
    */
    inline bool ErrorExceptionsEnabled() const; //Returns the value of ErrorExceptionsEnabled
    inline void SetErrorExceptionsEnabled(bool value); //Sets the value of the ErrorExceptionsEnabled property

    /*
    Property KeypadAddressChannelShortcutsEnabled
    */
    inline bool KeypadAddressChannelShortcutsEnabled() const; //Returns the value of KeypadAddressChannelShortcutsEnabled
    inline void SetKeypadAddressChannelShortcutsEnabled(bool value); //Sets the value of the KeypadAddressChannelShortcutsEnabled property

    /*
    Property KeypadConfigurationMode
    */
    inline ReplyXControl1::TxrstKeypadConfigurationMode KeypadConfigurationMode() const; //Returns the value of KeypadConfigurationMode
    inline void SetKeypadConfigurationMode(ReplyXControl1::TxrstKeypadConfigurationMode value); //Sets the value of the KeypadConfigurationMode property

    /*
    Property KeypadDigitEcho
    */
    inline bool KeypadDigitEcho() const; //Returns the value of KeypadDigitEcho
    inline void SetKeypadDigitEcho(bool value); //Sets the value of the KeypadDigitEcho property

    /*
    Property KeypadGlobalConfigurationLock
    */
    inline bool KeypadGlobalConfigurationLock() const; //Returns the value of KeypadGlobalConfigurationLock
    inline void SetKeypadGlobalConfigurationLock(bool value); //Sets the value of the KeypadGlobalConfigurationLock property

    /*
    Property KeypadList
    */
    inline QString KeypadList() const; //Returns the value of KeypadList

    /*
    Property KeypadListCount
    */
    inline int KeypadListCount() const; //Returns the value of KeypadListCount

    /*
    Property KeypadLowBatteryNotification
    */
    inline bool KeypadLowBatteryNotification() const; //Returns the value of KeypadLowBatteryNotification
    inline void SetKeypadLowBatteryNotification(bool value); //Sets the value of the KeypadLowBatteryNotification property

    /*
    Property KeypadOnlyAcceptInitialResponse
    */
    inline bool KeypadOnlyAcceptInitialResponse() const; //Returns the value of KeypadOnlyAcceptInitialResponse
    inline void SetKeypadOnlyAcceptInitialResponse(bool value); //Sets the value of the KeypadOnlyAcceptInitialResponse property

    /*
    Property KeypadPostAcknowledgement
    */
    inline bool KeypadPostAcknowledgement() const; //Returns the value of KeypadPostAcknowledgement
    inline void SetKeypadPostAcknowledgement(bool value); //Sets the value of the KeypadPostAcknowledgement property

    /*
    Property KeypadSoftkeysEnabled
    */
    inline bool KeypadSoftkeysEnabled() const; //Returns the value of KeypadSoftkeysEnabled
    inline void SetKeypadSoftkeysEnabled(bool value); //Sets the value of the KeypadSoftkeysEnabled property

    /*
    Property KeypadStarKeyEnabled
    */
    inline bool KeypadStarKeyEnabled() const; //Returns the value of KeypadStarKeyEnabled
    inline void SetKeypadStarKeyEnabled(bool value); //Sets the value of the KeypadStarKeyEnabled property

    /*
    Property KeypadTransmitPowerLevel
    */
    inline ReplyXControl1::TxrstKeypadPowerLevel KeypadTransmitPowerLevel() const; //Returns the value of KeypadTransmitPowerLevel
    inline void SetKeypadTransmitPowerLevel(ReplyXControl1::TxrstKeypadPowerLevel value); //Sets the value of the KeypadTransmitPowerLevel property

    /*
    Property LastErrorCode
    */
    inline int LastErrorCode() const; //Returns the value of LastErrorCode

    /*
    Property LastErrorMessage
    */
    inline QString LastErrorMessage() const; //Returns the value of LastErrorMessage

    /*
    Property MaxKeypads
    */
    inline int MaxKeypads() const; //Returns the value of MaxKeypads

    /*
    Property Polling
    */
    inline bool Polling() const; //Returns the value of Polling

    /*
    Property QuickStart
    */
    inline bool QuickStart() const; //Returns the value of QuickStart
    inline void SetQuickStart(bool value); //Sets the value of the QuickStart property

    /*
    Property ReplyModel
    */
    inline ReplyXControl1::TxrstReplyModel ReplyModel() const; //Returns the value of ReplyModel
    inline void SetReplyModel(ReplyXControl1::TxrstReplyModel value); //Sets the value of the ReplyModel property

    /*
    Property SerialPort
    */
    inline int SerialPort() const; //Returns the value of SerialPort
    inline void SetSerialPort(int value); //Sets the value of the SerialPort property

    /*
    Property _DAXCtrl
    */
    inline bool _DAXCtrl() const; //Returns the value of _DAXCtrl
    inline void set_DAXCtrl(bool value); //Sets the value of the _DAXCtrl property

    /*
    Method AddKeypad
    */
    inline void AddKeypad(int iKeypadNumber, int iCount);

    /*
    Method AddKeypadByString
    */
    inline void AddKeypadByString(const QString& sKeypads);

    /*
    Method BeginQuestion
    */
    inline void BeginQuestion();

    /*
    Method BeginQuestion
    */
    inline void BeginQuestion(int iQuestionNumber);

    /*
    Method CheckForAnyReplyDevice
    */
    inline bool CheckForAnyReplyDevice(int Port);

    /*
    Method CheckForReplyDevice
    */
    inline TxrstReplyModel CheckForReplyDevice(int Port, ReplyXControl1::TxrstReplyModel Model);

    /*
    Method ClearDataBuffer
    */
    inline void ClearDataBuffer();

    /*
    Method ClearKeypadList
    */
    inline void ClearKeypadList();

    /*
    Method ClearLastError
    */
    inline void ClearLastError();

    /*
    Method CollectKeypadSerialNumbers
    */
    inline void CollectKeypadSerialNumbers();

    /*
    Method Connect
    */
    inline bool Connect();

    /*
    Method Disconnect
    */
    inline void Disconnect();

    /*
    Method IsKeyLocked
    */
    inline bool IsKeyLocked(const QString& sKey);

    /*
    Method IsKeypadInList
    */
    inline bool IsKeypadInList(int KeypadID);

    /*
    Method LockAllKeys
    */
    inline void LockAllKeys();

    /*
    Method LockKey
    */
    inline void LockKey(const QString& sKey);

    /*
    Method Paint
    */
    inline void Paint();

    /*
    Method RemoveKeypad
    */
    inline void RemoveKeypad(int iKeypadNumber, int iCount);

    /*
    Method RemoveKeypadByString
    */
    inline void RemoveKeypadByString(const QString& sKeypads);

    /*
    Method RequestKeypadSerialNumbers
    */
    inline void RequestKeypadSerialNumbers();

    /*
    Method RequestKeypadTimestamps
    */
    inline void RequestKeypadTimestamps();

    /*
    Method ResetBase
    */
    inline void ResetBase();

    /*
    Method SetSubComponent
    */
    inline void SetSubComponent(bool IsSubComponent);

    /*
    Method StartPolling
    */
    inline void StartPolling();

    /*
    Method StopPolling
    */
    inline void StopPolling();

    /*
    Method UnlockAllKeys
    */
    inline void UnlockAllKeys();

    /*
    Method UnlockKey
    */
    inline void UnlockKey(const QString& sKey);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface IReplyXEvents

// Actual coclasses
class REPLYXCONTROL1_EXPORT ReplyX : public QAxWidget
{
public:
    ReplyX(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{69fc1183-7937-4bb1-a1c8-725b778511c9}");
    }

    ReplyX(IReplyX *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BaseChannel
    */
    inline int BaseChannel() const; //Returns the value of BaseChannel
    inline void SetBaseChannel(int value); //Sets the value of the BaseChannel property

    /*
    Property BaseSerialNumber
    */
    inline QString BaseSerialNumber() const; //Returns the value of BaseSerialNumber

    /*
    Property BaseVersion
    */
    inline QString BaseVersion() const; //Returns the value of BaseVersion

    /*
    Property CommunicationTimeout
    */
    inline int CommunicationTimeout() const; //Returns the value of CommunicationTimeout
    inline void SetCommunicationTimeout(int value); //Sets the value of the CommunicationTimeout property

    /*
    Property Connected
    */
    inline bool Connected() const; //Returns the value of Connected

    /*
    Property ControlVersion
    */
    inline QString ControlVersion() const; //Returns the value of ControlVersion

    /*
    Property DebugEventsEnabled
    */
    inline bool DebugEventsEnabled() const; //Returns the value of DebugEventsEnabled
    inline void SetDebugEventsEnabled(bool value); //Sets the value of the DebugEventsEnabled property

    /*
    Property ErrorEventsEnabled
    */
    inline bool ErrorEventsEnabled() const; //Returns the value of ErrorEventsEnabled
    inline void SetErrorEventsEnabled(bool value); //Sets the value of the ErrorEventsEnabled property

    /*
    Property ErrorExceptionsEnabled
    */
    inline bool ErrorExceptionsEnabled() const; //Returns the value of ErrorExceptionsEnabled
    inline void SetErrorExceptionsEnabled(bool value); //Sets the value of the ErrorExceptionsEnabled property

    /*
    Property KeypadAddressChannelShortcutsEnabled
    */
    inline bool KeypadAddressChannelShortcutsEnabled() const; //Returns the value of KeypadAddressChannelShortcutsEnabled
    inline void SetKeypadAddressChannelShortcutsEnabled(bool value); //Sets the value of the KeypadAddressChannelShortcutsEnabled property

    /*
    Property KeypadConfigurationMode
    */
    inline ReplyXControl1::TxrstKeypadConfigurationMode KeypadConfigurationMode() const; //Returns the value of KeypadConfigurationMode
    inline void SetKeypadConfigurationMode(ReplyXControl1::TxrstKeypadConfigurationMode value); //Sets the value of the KeypadConfigurationMode property

    /*
    Property KeypadDigitEcho
    */
    inline bool KeypadDigitEcho() const; //Returns the value of KeypadDigitEcho
    inline void SetKeypadDigitEcho(bool value); //Sets the value of the KeypadDigitEcho property

    /*
    Property KeypadGlobalConfigurationLock
    */
    inline bool KeypadGlobalConfigurationLock() const; //Returns the value of KeypadGlobalConfigurationLock
    inline void SetKeypadGlobalConfigurationLock(bool value); //Sets the value of the KeypadGlobalConfigurationLock property

    /*
    Property KeypadList
    */
    inline QString KeypadList() const; //Returns the value of KeypadList

    /*
    Property KeypadListCount
    */
    inline int KeypadListCount() const; //Returns the value of KeypadListCount

    /*
    Property KeypadLowBatteryNotification
    */
    inline bool KeypadLowBatteryNotification() const; //Returns the value of KeypadLowBatteryNotification
    inline void SetKeypadLowBatteryNotification(bool value); //Sets the value of the KeypadLowBatteryNotification property

    /*
    Property KeypadOnlyAcceptInitialResponse
    */
    inline bool KeypadOnlyAcceptInitialResponse() const; //Returns the value of KeypadOnlyAcceptInitialResponse
    inline void SetKeypadOnlyAcceptInitialResponse(bool value); //Sets the value of the KeypadOnlyAcceptInitialResponse property

    /*
    Property KeypadPostAcknowledgement
    */
    inline bool KeypadPostAcknowledgement() const; //Returns the value of KeypadPostAcknowledgement
    inline void SetKeypadPostAcknowledgement(bool value); //Sets the value of the KeypadPostAcknowledgement property

    /*
    Property KeypadSoftkeysEnabled
    */
    inline bool KeypadSoftkeysEnabled() const; //Returns the value of KeypadSoftkeysEnabled
    inline void SetKeypadSoftkeysEnabled(bool value); //Sets the value of the KeypadSoftkeysEnabled property

    /*
    Property KeypadStarKeyEnabled
    */
    inline bool KeypadStarKeyEnabled() const; //Returns the value of KeypadStarKeyEnabled
    inline void SetKeypadStarKeyEnabled(bool value); //Sets the value of the KeypadStarKeyEnabled property

    /*
    Property KeypadTransmitPowerLevel
    */
    inline ReplyXControl1::TxrstKeypadPowerLevel KeypadTransmitPowerLevel() const; //Returns the value of KeypadTransmitPowerLevel
    inline void SetKeypadTransmitPowerLevel(ReplyXControl1::TxrstKeypadPowerLevel value); //Sets the value of the KeypadTransmitPowerLevel property

    /*
    Property LastErrorCode
    */
    inline int LastErrorCode() const; //Returns the value of LastErrorCode

    /*
    Property LastErrorMessage
    */
    inline QString LastErrorMessage() const; //Returns the value of LastErrorMessage

    /*
    Property MaxKeypads
    */
    inline int MaxKeypads() const; //Returns the value of MaxKeypads

    /*
    Property Polling
    */
    inline bool Polling() const; //Returns the value of Polling

    /*
    Property QuickStart
    */
    inline bool QuickStart() const; //Returns the value of QuickStart
    inline void SetQuickStart(bool value); //Sets the value of the QuickStart property

    /*
    Property ReplyModel
    */
    inline ReplyXControl1::TxrstReplyModel ReplyModel() const; //Returns the value of ReplyModel
    inline void SetReplyModel(ReplyXControl1::TxrstReplyModel value); //Sets the value of the ReplyModel property

    /*
    Property SerialPort
    */
    inline int SerialPort() const; //Returns the value of SerialPort
    inline void SetSerialPort(int value); //Sets the value of the SerialPort property

    /*
    Property _DAXCtrl
    */
    inline bool _DAXCtrl() const; //Returns the value of _DAXCtrl
    inline void set_DAXCtrl(bool value); //Sets the value of the _DAXCtrl property

    /*
    Method AddKeypad
    */
    inline void AddKeypad(int iKeypadNumber, int iCount);

    /*
    Method AddKeypadByString
    */
    inline void AddKeypadByString(const QString& sKeypads);

    /*
    Method BeginQuestion
    */
    inline void BeginQuestion();

    /*
    Method BeginQuestion
    */
    inline void BeginQuestion(int iQuestionNumber);

    /*
    Method CheckForAnyReplyDevice
    */
    inline bool CheckForAnyReplyDevice(int Port);

    /*
    Method CheckForReplyDevice
    */
    inline TxrstReplyModel CheckForReplyDevice(int Port, ReplyXControl1::TxrstReplyModel Model);

    /*
    Method ClearDataBuffer
    */
    inline void ClearDataBuffer();

    /*
    Method ClearKeypadList
    */
    inline void ClearKeypadList();

    /*
    Method ClearLastError
    */
    inline void ClearLastError();

    /*
    Method CollectKeypadSerialNumbers
    */
    inline void CollectKeypadSerialNumbers();

    /*
    Method Connect
    */
    inline bool Connect();

    /*
    Method Disconnect
    */
    inline void Disconnect();

    /*
    Method IsKeyLocked
    */
    inline bool IsKeyLocked(const QString& sKey);

    /*
    Method IsKeypadInList
    */
    inline bool IsKeypadInList(int KeypadID);

    /*
    Method LockAllKeys
    */
    inline void LockAllKeys();

    /*
    Method LockKey
    */
    inline void LockKey(const QString& sKey);

    /*
    Method Paint
    */
    inline void Paint();

    /*
    Method RemoveKeypad
    */
    inline void RemoveKeypad(int iKeypadNumber, int iCount);

    /*
    Method RemoveKeypadByString
    */
    inline void RemoveKeypadByString(const QString& sKeypads);

    /*
    Method RequestKeypadSerialNumbers
    */
    inline void RequestKeypadSerialNumbers();

    /*
    Method RequestKeypadTimestamps
    */
    inline void RequestKeypadTimestamps();

    /*
    Method ResetBase
    */
    inline void ResetBase();

    /*
    Method SetSubComponent
    */
    inline void SetSubComponent(bool IsSubComponent);

    /*
    Method StartPolling
    */
    inline void StartPolling();

    /*
    Method StopPolling
    */
    inline void StopPolling();

    /*
    Method UnlockAllKeys
    */
    inline void UnlockAllKeys();

    /*
    Method UnlockKey
    */
    inline void UnlockKey(const QString& sKey);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_REPLYXCONTROL1_NOINLINES
inline int IReplyX::BaseChannel() const
{
    QVariant qax_result = property("BaseChannel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IReplyX::SetBaseChannel(int value){ setProperty("BaseChannel", QVariant(value)); }

inline QString IReplyX::BaseSerialNumber() const
{
    QVariant qax_result = property("BaseSerialNumber");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString IReplyX::BaseVersion() const
{
    QVariant qax_result = property("BaseVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IReplyX::CommunicationTimeout() const
{
    QVariant qax_result = property("CommunicationTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IReplyX::SetCommunicationTimeout(int value){ setProperty("CommunicationTimeout", QVariant(value)); }

inline bool IReplyX::Connected() const
{
    QVariant qax_result = property("Connected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString IReplyX::ControlVersion() const
{
    QVariant qax_result = property("ControlVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool IReplyX::DebugEventsEnabled() const
{
    QVariant qax_result = property("DebugEventsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetDebugEventsEnabled(bool value){ setProperty("DebugEventsEnabled", QVariant(value)); }

inline bool IReplyX::ErrorEventsEnabled() const
{
    QVariant qax_result = property("ErrorEventsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetErrorEventsEnabled(bool value){ setProperty("ErrorEventsEnabled", QVariant(value)); }

inline bool IReplyX::ErrorExceptionsEnabled() const
{
    QVariant qax_result = property("ErrorExceptionsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetErrorExceptionsEnabled(bool value){ setProperty("ErrorExceptionsEnabled", QVariant(value)); }

inline bool IReplyX::KeypadAddressChannelShortcutsEnabled() const
{
    QVariant qax_result = property("KeypadAddressChannelShortcutsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadAddressChannelShortcutsEnabled(bool value){ setProperty("KeypadAddressChannelShortcutsEnabled", QVariant(value)); }

inline ReplyXControl1::TxrstKeypadConfigurationMode IReplyX::KeypadConfigurationMode() const
{
    QVariant qax_result = property("KeypadConfigurationMode");
    Q_ASSERT(qax_result.isValid());
    return *(ReplyXControl1::TxrstKeypadConfigurationMode*)qax_result.constData();
}
inline void IReplyX::SetKeypadConfigurationMode(ReplyXControl1::TxrstKeypadConfigurationMode value){ setProperty("KeypadConfigurationMode", QVariant(value)); }

inline bool IReplyX::KeypadDigitEcho() const
{
    QVariant qax_result = property("KeypadDigitEcho");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadDigitEcho(bool value){ setProperty("KeypadDigitEcho", QVariant(value)); }

inline bool IReplyX::KeypadGlobalConfigurationLock() const
{
    QVariant qax_result = property("KeypadGlobalConfigurationLock");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadGlobalConfigurationLock(bool value){ setProperty("KeypadGlobalConfigurationLock", QVariant(value)); }

inline QString IReplyX::KeypadList() const
{
    QVariant qax_result = property("KeypadList");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IReplyX::KeypadListCount() const
{
    QVariant qax_result = property("KeypadListCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IReplyX::KeypadLowBatteryNotification() const
{
    QVariant qax_result = property("KeypadLowBatteryNotification");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadLowBatteryNotification(bool value){ setProperty("KeypadLowBatteryNotification", QVariant(value)); }

inline bool IReplyX::KeypadOnlyAcceptInitialResponse() const
{
    QVariant qax_result = property("KeypadOnlyAcceptInitialResponse");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadOnlyAcceptInitialResponse(bool value){ setProperty("KeypadOnlyAcceptInitialResponse", QVariant(value)); }

inline bool IReplyX::KeypadPostAcknowledgement() const
{
    QVariant qax_result = property("KeypadPostAcknowledgement");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadPostAcknowledgement(bool value){ setProperty("KeypadPostAcknowledgement", QVariant(value)); }

inline bool IReplyX::KeypadSoftkeysEnabled() const
{
    QVariant qax_result = property("KeypadSoftkeysEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadSoftkeysEnabled(bool value){ setProperty("KeypadSoftkeysEnabled", QVariant(value)); }

inline bool IReplyX::KeypadStarKeyEnabled() const
{
    QVariant qax_result = property("KeypadStarKeyEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetKeypadStarKeyEnabled(bool value){ setProperty("KeypadStarKeyEnabled", QVariant(value)); }

inline ReplyXControl1::TxrstKeypadPowerLevel IReplyX::KeypadTransmitPowerLevel() const
{
    QVariant qax_result = property("KeypadTransmitPowerLevel");
    Q_ASSERT(qax_result.isValid());
    return *(ReplyXControl1::TxrstKeypadPowerLevel*)qax_result.constData();
}
inline void IReplyX::SetKeypadTransmitPowerLevel(ReplyXControl1::TxrstKeypadPowerLevel value){ setProperty("KeypadTransmitPowerLevel", QVariant(value)); }

inline int IReplyX::LastErrorCode() const
{
    QVariant qax_result = property("LastErrorCode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IReplyX::LastErrorMessage() const
{
    QVariant qax_result = property("LastErrorMessage");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int IReplyX::MaxKeypads() const
{
    QVariant qax_result = property("MaxKeypads");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool IReplyX::Polling() const
{
    QVariant qax_result = property("Polling");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IReplyX::QuickStart() const
{
    QVariant qax_result = property("QuickStart");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::SetQuickStart(bool value){ setProperty("QuickStart", QVariant(value)); }

inline ReplyXControl1::TxrstReplyModel IReplyX::ReplyModel() const
{
    QVariant qax_result = property("ReplyModel");
    Q_ASSERT(qax_result.isValid());
    return *(ReplyXControl1::TxrstReplyModel*)qax_result.constData();
}
inline void IReplyX::SetReplyModel(ReplyXControl1::TxrstReplyModel value){ setProperty("ReplyModel", QVariant(value)); }

inline int IReplyX::SerialPort() const
{
    QVariant qax_result = property("SerialPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IReplyX::SetSerialPort(int value){ setProperty("SerialPort", QVariant(value)); }

inline bool IReplyX::_DAXCtrl() const
{
    QVariant qax_result = property("_DAXCtrl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IReplyX::set_DAXCtrl(bool value){ setProperty("_DAXCtrl", QVariant(value)); }

inline void IReplyX::AddKeypad(int iKeypadNumber, int iCount)
{
    void *_a[] = {0, (void*)&iKeypadNumber, (void*)&iCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 7, _a);
}

inline void IReplyX::AddKeypadByString(const QString& sKeypads)
{
    void *_a[] = {0, (void*)&sKeypads};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IReplyX::BeginQuestion()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IReplyX::BeginQuestion(int iQuestionNumber)
{
    void *_a[] = {0, (void*)&iQuestionNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline bool IReplyX::CheckForAnyReplyDevice(int Port)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline TxrstReplyModel IReplyX::CheckForReplyDevice(int Port, ReplyXControl1::TxrstReplyModel Model)
{
    TxrstReplyModel qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&Model};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void IReplyX::ClearDataBuffer()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void IReplyX::ClearKeypadList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IReplyX::ClearLastError()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IReplyX::CollectKeypadSerialNumbers()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool IReplyX::Connect()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void IReplyX::Disconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline bool IReplyX::IsKeyLocked(const QString& sKey)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sKey};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool IReplyX::IsKeypadInList(int KeypadID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&KeypadID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void IReplyX::LockAllKeys()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IReplyX::LockKey(const QString& sKey)
{
    void *_a[] = {0, (void*)&sKey};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IReplyX::Paint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IReplyX::RemoveKeypad(int iKeypadNumber, int iCount)
{
    void *_a[] = {0, (void*)&iKeypadNumber, (void*)&iCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IReplyX::RemoveKeypadByString(const QString& sKeypads)
{
    void *_a[] = {0, (void*)&sKeypads};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IReplyX::RequestKeypadSerialNumbers()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IReplyX::RequestKeypadTimestamps()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void IReplyX::ResetBase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void IReplyX::SetSubComponent(bool IsSubComponent)
{
    void *_a[] = {0, (void*)&IsSubComponent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IReplyX::StartPolling()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IReplyX::StopPolling()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IReplyX::UnlockAllKeys()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IReplyX::UnlockKey(const QString& sKey)
{
    void *_a[] = {0, (void*)&sKey};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}


inline int ReplyX::BaseChannel() const
{
    QVariant qax_result = property("BaseChannel");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ReplyX::SetBaseChannel(int value){ setProperty("BaseChannel", QVariant(value)); }

inline QString ReplyX::BaseSerialNumber() const
{
    QVariant qax_result = property("BaseSerialNumber");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ReplyX::BaseVersion() const
{
    QVariant qax_result = property("BaseVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int ReplyX::CommunicationTimeout() const
{
    QVariant qax_result = property("CommunicationTimeout");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ReplyX::SetCommunicationTimeout(int value){ setProperty("CommunicationTimeout", QVariant(value)); }

inline bool ReplyX::Connected() const
{
    QVariant qax_result = property("Connected");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString ReplyX::ControlVersion() const
{
    QVariant qax_result = property("ControlVersion");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool ReplyX::DebugEventsEnabled() const
{
    QVariant qax_result = property("DebugEventsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetDebugEventsEnabled(bool value){ setProperty("DebugEventsEnabled", QVariant(value)); }

inline bool ReplyX::ErrorEventsEnabled() const
{
    QVariant qax_result = property("ErrorEventsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetErrorEventsEnabled(bool value){ setProperty("ErrorEventsEnabled", QVariant(value)); }

inline bool ReplyX::ErrorExceptionsEnabled() const
{
    QVariant qax_result = property("ErrorExceptionsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetErrorExceptionsEnabled(bool value){ setProperty("ErrorExceptionsEnabled", QVariant(value)); }

inline bool ReplyX::KeypadAddressChannelShortcutsEnabled() const
{
    QVariant qax_result = property("KeypadAddressChannelShortcutsEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadAddressChannelShortcutsEnabled(bool value){ setProperty("KeypadAddressChannelShortcutsEnabled", QVariant(value)); }

inline ReplyXControl1::TxrstKeypadConfigurationMode ReplyX::KeypadConfigurationMode() const
{
    QVariant qax_result = property("KeypadConfigurationMode");
    Q_ASSERT(qax_result.isValid());
    return *(ReplyXControl1::TxrstKeypadConfigurationMode*)qax_result.constData();
}
inline void ReplyX::SetKeypadConfigurationMode(ReplyXControl1::TxrstKeypadConfigurationMode value){ setProperty("KeypadConfigurationMode", QVariant(value)); }

inline bool ReplyX::KeypadDigitEcho() const
{
    QVariant qax_result = property("KeypadDigitEcho");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadDigitEcho(bool value){ setProperty("KeypadDigitEcho", QVariant(value)); }

inline bool ReplyX::KeypadGlobalConfigurationLock() const
{
    QVariant qax_result = property("KeypadGlobalConfigurationLock");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadGlobalConfigurationLock(bool value){ setProperty("KeypadGlobalConfigurationLock", QVariant(value)); }

inline QString ReplyX::KeypadList() const
{
    QVariant qax_result = property("KeypadList");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int ReplyX::KeypadListCount() const
{
    QVariant qax_result = property("KeypadListCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool ReplyX::KeypadLowBatteryNotification() const
{
    QVariant qax_result = property("KeypadLowBatteryNotification");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadLowBatteryNotification(bool value){ setProperty("KeypadLowBatteryNotification", QVariant(value)); }

inline bool ReplyX::KeypadOnlyAcceptInitialResponse() const
{
    QVariant qax_result = property("KeypadOnlyAcceptInitialResponse");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadOnlyAcceptInitialResponse(bool value){ setProperty("KeypadOnlyAcceptInitialResponse", QVariant(value)); }

inline bool ReplyX::KeypadPostAcknowledgement() const
{
    QVariant qax_result = property("KeypadPostAcknowledgement");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadPostAcknowledgement(bool value){ setProperty("KeypadPostAcknowledgement", QVariant(value)); }

inline bool ReplyX::KeypadSoftkeysEnabled() const
{
    QVariant qax_result = property("KeypadSoftkeysEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadSoftkeysEnabled(bool value){ setProperty("KeypadSoftkeysEnabled", QVariant(value)); }

inline bool ReplyX::KeypadStarKeyEnabled() const
{
    QVariant qax_result = property("KeypadStarKeyEnabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetKeypadStarKeyEnabled(bool value){ setProperty("KeypadStarKeyEnabled", QVariant(value)); }

inline ReplyXControl1::TxrstKeypadPowerLevel ReplyX::KeypadTransmitPowerLevel() const
{
    QVariant qax_result = property("KeypadTransmitPowerLevel");
    Q_ASSERT(qax_result.isValid());
    return *(ReplyXControl1::TxrstKeypadPowerLevel*)qax_result.constData();
}
inline void ReplyX::SetKeypadTransmitPowerLevel(ReplyXControl1::TxrstKeypadPowerLevel value){ setProperty("KeypadTransmitPowerLevel", QVariant(value)); }

inline int ReplyX::LastErrorCode() const
{
    QVariant qax_result = property("LastErrorCode");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString ReplyX::LastErrorMessage() const
{
    QVariant qax_result = property("LastErrorMessage");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int ReplyX::MaxKeypads() const
{
    QVariant qax_result = property("MaxKeypads");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool ReplyX::Polling() const
{
    QVariant qax_result = property("Polling");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ReplyX::QuickStart() const
{
    QVariant qax_result = property("QuickStart");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::SetQuickStart(bool value){ setProperty("QuickStart", QVariant(value)); }

inline ReplyXControl1::TxrstReplyModel ReplyX::ReplyModel() const
{
    QVariant qax_result = property("ReplyModel");
    Q_ASSERT(qax_result.isValid());
    return *(ReplyXControl1::TxrstReplyModel*)qax_result.constData();
}
inline void ReplyX::SetReplyModel(ReplyXControl1::TxrstReplyModel value){ setProperty("ReplyModel", QVariant(value)); }

inline int ReplyX::SerialPort() const
{
    QVariant qax_result = property("SerialPort");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void ReplyX::SetSerialPort(int value){ setProperty("SerialPort", QVariant(value)); }

inline bool ReplyX::_DAXCtrl() const
{
    QVariant qax_result = property("_DAXCtrl");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ReplyX::set_DAXCtrl(bool value){ setProperty("_DAXCtrl", QVariant(value)); }

inline void ReplyX::AddKeypad(int iKeypadNumber, int iCount)
{
    void *_a[] = {0, (void*)&iKeypadNumber, (void*)&iCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void ReplyX::AddKeypadByString(const QString& sKeypads)
{
    void *_a[] = {0, (void*)&sKeypads};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void ReplyX::BeginQuestion()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void ReplyX::BeginQuestion(int iQuestionNumber)
{
    void *_a[] = {0, (void*)&iQuestionNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline bool ReplyX::CheckForAnyReplyDevice(int Port)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline TxrstReplyModel ReplyX::CheckForReplyDevice(int Port, ReplyXControl1::TxrstReplyModel Model)
{
    TxrstReplyModel qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Port, (void*)&Model};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline void ReplyX::ClearDataBuffer()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void ReplyX::ClearKeypadList()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void ReplyX::ClearLastError()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void ReplyX::CollectKeypadSerialNumbers()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline bool ReplyX::Connect()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline void ReplyX::Disconnect()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline bool ReplyX::IsKeyLocked(const QString& sKey)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&sKey};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool ReplyX::IsKeypadInList(int KeypadID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&KeypadID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline void ReplyX::LockAllKeys()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void ReplyX::LockKey(const QString& sKey)
{
    void *_a[] = {0, (void*)&sKey};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void ReplyX::Paint()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void ReplyX::RemoveKeypad(int iKeypadNumber, int iCount)
{
    void *_a[] = {0, (void*)&iKeypadNumber, (void*)&iCount};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void ReplyX::RemoveKeypadByString(const QString& sKeypads)
{
    void *_a[] = {0, (void*)&sKeypads};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void ReplyX::RequestKeypadSerialNumbers()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void ReplyX::RequestKeypadTimestamps()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void ReplyX::ResetBase()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void ReplyX::SetSubComponent(bool IsSubComponent)
{
    void *_a[] = {0, (void*)&IsSubComponent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void ReplyX::StartPolling()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void ReplyX::StopPolling()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void ReplyX::UnlockAllKeys()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void ReplyX::UnlockKey(const QString& sKey)
{
    void *_a[] = {0, (void*)&sKey};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}



#endif

}

template<>
inline void *qMetaTypeConstructHelper(const ReplyXControl1::IReplyX *t)
{ Q_ASSERT(!t); return new ReplyXControl1::IReplyX; }

template<>
inline void *qMetaTypeConstructHelper(const ReplyXControl1::ReplyX *t)
{ Q_ASSERT(!t); return new ReplyXControl1::ReplyX; }

#endif

