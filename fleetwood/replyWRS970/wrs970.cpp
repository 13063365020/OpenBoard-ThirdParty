/****************************************************************************
**
** Metadata for WRS970 generated by dumpcpp from type library
** ocx\WRS970.ocx
**
****************************************************************************/

#define QAX_DUMPCPP_WRS970_NOINLINES
#include "wrs970.h"

using namespace WRS970;

static const uint qt_meta_data_WRS970__IWRS970X[] = {

 // content:
       1,       // revision
       0,       // classname
       0,    0, // classinfo
       91,    10, // methods
       70,    465, // properties
       11,    675, // enums/sets

 // signals: signature, parameters, type, tag, flags
       17, 56, 78, 79, 5,
       80, 105, 110, 111, 5,
       112, 138, 153, 154, 5,

 // slots: signature, parameters, type, tag, flags
       155, 174, 187, 192, 9,
       193, 216, 224, 229, 9,
       230, 264, 296, 301, 9,
       302, 333, 359, 360, 9,
       361, 406, 439, 440, 9,
       441, 501, 548, 549, 9,
       550, 568, 569, 570, 9,
       571, 589, 590, 591, 9,
       592, 609, 622, 623, 9,
       624, 637, 638, 639, 9,
       640, 675, 676, 680, 9,
       681, 705, 721, 729, 9,
       730, 744, 745, 746, 9,
       747, 765, 781, 790, 9,
       791, 808, 809, 810, 9,
       811, 835, 848, 853, 9,
       854, 870, 871, 876, 9,
       877, 909, 929, 930, 9,
       931, 949, 954, 955, 9,
       956, 975, 976, 977, 9,
       978, 996, 1004, 1005, 9,
       1006, 1014, 1015, 1016, 9,
       1017, 1039, 1052, 1053, 9,
       1054, 1080, 1088, 1093, 9,
       1094, 1118, 1127, 1128, 9,
       1129, 1154, 1177, 1178, 9,
       1179, 1212, 1233, 1234, 9,
       1235, 1264, 1276, 1277, 9,
       1278, 1304, 1321, 1322, 9,
       1323, 1344, 1357, 1358, 9,
       1359, 1383, 1398, 1399, 9,
       1400, 1421, 1433, 1434, 9,
       1435, 1467, 1490, 1491, 9,
       1492, 1512, 1522, 1523, 9,
       1524, 1544, 1556, 1557, 9,
       1558, 1579, 1588, 1589, 9,
       1590, 1611, 1623, 1624, 9,
       1625, 1648, 1657, 1658, 9,
       1659, 1688, 1709, 1710, 9,
       1711, 1737, 1751, 1752, 9,
       1753, 1780, 1795, 1796, 9,
       1797, 1819, 1832, 1833, 9,
       1834, 1857, 1863, 1864, 9,
       1865, 1883, 1892, 1893, 9,
       1894, 1918, 1933, 1934, 9,
       1935, 1952, 1960, 1961, 9,
       1962, 1985, 1999, 2000, 9,
       2001, 2028, 2046, 2047, 9,
       2048, 2067, 2077, 2078, 9,
       2079, 2104, 2120, 2121, 9,
       2122, 2147, 2163, 2164, 9,
       2165, 2190, 2206, 2207, 9,
       2208, 2236, 2255, 2256, 9,
       2257, 2282, 2298, 2299, 9,
       2300, 2336, 2359, 2360, 9,
       2361, 2397, 2421, 2422, 9,
       2423, 2447, 2462, 2463, 9,
       2464, 2492, 2511, 2512, 9,
       2513, 2551, 2580, 2581, 9,
       2582, 2615, 2632, 2633, 9,
       2634, 2661, 2679, 2680, 9,
       2681, 2707, 2724, 2725, 9,
       2726, 2752, 2770, 2771, 9,
       2772, 2799, 2810, 2811, 9,
       2812, 2834, 2848, 2849, 9,
       2850, 2873, 2887, 2888, 9,
       2889, 2914, 2924, 2925, 9,
       2926, 2952, 2969, 2970, 9,
       2971, 3002, 3013, 3014, 9,
       3015, 3046, 3068, 3069, 9,
       3070, 3088, 3097, 3098, 9,
       3099, 3122, 3137, 3138, 9,
       3139, 3161, 3174, 3175, 9,
       3176, 3197, 3209, 3210, 9,
       3211, 3234, 3249, 3250, 9,
       3251, 3275, 3300, 3301, 9,
       3302, 3322, 3333, 3334, 9,
       3335, 3357, 3370, 3371, 9,
       3372, 3393, 3405, 3406, 9,
       3407, 3429, 3444, 3445, 9,
       3446, 3469, 3480, 3481, 9,
       3482, 3498, 3506, 3507, 9,
       3508, 3532, 3547, 3548, 9,
       3549, 3567, 3576, 3577, 9,
       3578, 3595, 3603, 3604, 9,
       3605, 3625, 3630, 3631, 9,
       3632, 3656, 3657, 3662, 9,
       3663, 3689, 3690, 3695, 9,

 // properties: name, type, flags
       3696, 3708, 0x0201500b, 		 // TAddressMode AddressMode
       3721, 3735, 0x01004001, 		 // bool AlignDisabled
       3740, 3757, 0x01014003, 		 // bool AlignWithMargins
       3762, 3775, 0x02014003, 		 // int AnswerPeriod
       3779, 3794, 0x01015003, 		 // bool Authentication
       3799, 3811, 0x01015003, 		 // bool AutoConnect
       3816, 3839, 0x01015003, 		 // bool AutomateQuestionNumber
       3844, 3854, 0x0201500b, 		 // TBand AvoidWifi
       3860, 3872, 0x02015003, 		 // int BaseChannel
       3876, 3885, 0x0a014003, 		 // QString BaseName
       3893, 3904, 0x0a004001, 		 // QString BaseSerial
       3912, 3924, 0x0a004001, 		 // QString BaseVersion
       3932, 3944, 0x01014003, 		 // bool BeepKeypads
       3949, 3958, 0x0201500b, 		 // TCommType CommType
       3968, 3989, 0x02015003, 		 // int CommunicationTimeout
       3993, 4003, 0x01004001, 		 // bool Connected
       4008, 4023, 0x0a005001, 		 // QString ControlVersion
       4031, 4045, 0x0a014003, 		 // QString CustomMessage
       4053, 4068, 0x0a015003, 		 // QString CustomSoftKeys
       4076, 4089, 0x01015003, 		 // bool DebugEnabled
       4094, 4103, 0x01014003, 		 // bool DockSite
       4108, 4123, 0x01014003, 		 // bool DoubleBuffered
       4128, 4136, 0x01014003, 		 // bool Enabled
       4141, 4155, 0x01015003, 		 // bool ErrorsEnabled
       4160, 4178, 0x01015003, 		 // bool ExceptionsEnabled
       4183, 4198, 0x02004001, 		 // int ExplicitHeight
       4202, 4215, 0x02004001, 		 // int ExplicitLeft
       4219, 4231, 0x02004001, 		 // int ExplicitTop
       4235, 4249, 0x02004001, 		 // int ExplicitWidth
       4253, 4263, 0x01014003, 		 // bool ForceMenu
       4268, 4284, 0x01015003, 		 // bool HideAntennaIcon
       4289, 4305, 0x01015003, 		 // bool HideBatteryIcon
       4310, 4326, 0x01015003, 		 // bool KeyLockFeedback
       4331, 4350, 0x01015003, 		 // bool KeypadAlertEnabled
       4355, 4371, 0x01015003, 		 // bool KeypadBacklight
       4376, 4399, 0x0201500b, 		 // TOnTimer KeypadBacklightOnTimer
       4408, 4432, 0x0201500b, 		 // TOpMode KeypadBacklightOpMethod
       4440, 4455, 0x01015003, 		 // bool KeypadHideVote
       4460, 4471, 0x0a004001, 		 // QString KeypadList
       4479, 4495, 0x02004001, 		 // int KeypadListCount
       4499, 4518, 0x01015003, 		 // bool KeypadLoginEnabled
       4523, 4552, 0x01015003, 		 // bool KeypadLowBatteryNotification
       4557, 4574, 0x0201500b, 		 // TPowerTimer KeypadPowerTimer
       4586, 4604, 0x01015003, 		 // bool KeypadsOutOfRange
       4609, 4626, 0x01014003, 		 // bool KeypadsPowerDown
       4631, 4649, 0x02015003, 		 // int MaxKeypadsAllowed
       4653, 4664, 0x0201500b, 		 // TMenuAccess MenuAccess
       4676, 4690, 0x02014003, 		 // int MessagePeriod
       4694, 4700, 0x0a005001, 		 // QString Model
       4708, 4722, 0x01004001, 		 // bool MouseInClient
       4727, 4741, 0x01015003, 		 // bool MsgAckEnabled
       4746, 4756, 0x0201500b, 		 // TPingTimer PingTimer
       4767, 4784, 0x01015003, 		 // bool PowerKeyDisabled
       4789, 4800, 0x0201500b, 		 // TBasePowerLevel PowerLevel
       4816, 4838, 0x01015003, 		 // bool ReceiveArrowOnAnyBase
       4843, 4852, 0x01015003, 		 // bool SMSEntry
       4857, 4872, 0x02015003, 		 // int SMSVoteTimeout
       4876, 4889, 0x01015003, 		 // bool ScrollFaster
       4894, 4906, 0x01015003, 		 // bool SecureLogin
       4911, 4926, 0x02014003, 		 // int SeqLinkPackets
       4930, 4941, 0x01014003, 		 // bool ShowAnswer
       4946, 4959, 0x01015003, 		 // bool ShowReceived
       4964, 4976, 0x01015003, 		 // bool ShowSending
       4981, 4992, 0x0a015003, 		 // QString TCPAddress
       5000, 5008, 0x02015003, 		 // int TCPPort
       5012, 5027, 0x01014003, 		 // bool UseDockManager
       5032, 5041, 0x01015003, 		 // bool Version3
       5046, 5054, 0x01014003, 		 // bool Visible
       5059, 5082, 0x02004001, 		 // int VisibleDockClientCount
       5086, 5094, 0x0a055003, 		 // QString control

 // enums: name, flags, count, data
       5102, 0x0, 2, 719, 
       5115, 0x0, 11, 723, 
       5127, 0x0, 7, 745, 
       5133, 0x0, 5, 759, 
       5149, 0x0, 3, 769, 
       5159, 0x0, 17, 775, 
       5174, 0x0, 6, 809, 
       5186, 0x0, 4, 821, 
       5195, 0x0, 3, 829, 
       5203, 0x0, 4, 835, 
       5214, 0x0, 4, 843, 

 // enum data: key, value
       5226, WRS970::addrDynamic,
       5238, WRS970::addrStatic,
       5249, WRS970::atSingleAlpha,
       5263, WRS970::atSingleDigit,
       5277, WRS970::atYesNo,
       5285, WRS970::atYesAbstainNo,
       5300, WRS970::atAgreeDisagree,
       5316, WRS970::atLowMedHigh,
       5329, WRS970::atTrueFalse,
       5341, WRS970::atMomentToMoment,
       5358, WRS970::atMultiAlphaNumeric,
       5378, WRS970::atNegativePlus,
       5393, WRS970::atCustomSoftKeys,
       5410, WRS970::bndNone,
       5418, WRS970::bndLowMid,
       5428, WRS970::bndLowHigh,
       5439, WRS970::bndMidHigh,
       5450, WRS970::bndLow,
       5457, WRS970::bndMid,
       5464, WRS970::bndHigh,
       5472, WRS970::pwrLow,
       5479, WRS970::pwrMid,
       5486, WRS970::pwrHigh,
       5494, WRS970::pwrEuroMax,
       5505, WRS970::pwrUSMax,
       5514, WRS970::ctUndefined,
       5526, WRS970::ctTCP,
       5532, WRS970::ctUSB,
       5538, WRS970::lopBlank,
       5547, WRS970::lopVoteNow,
       5558, WRS970::lopSystemIdle,
       5572, WRS970::lopThankYou,
       5584, WRS970::lopWelcome,
       5595, WRS970::lopChooseAgain,
       5610, WRS970::lopVoteEnded,
       5623, WRS970::lopBreakTime,
       5636, WRS970::lopQuestions,
       5649, WRS970::lopHello,
       5658, WRS970::lopPleaseVote,
       5672, WRS970::lopTimeIsUp,
       5684, WRS970::lopManyThanks,
       5698, WRS970::lopQuestionNumber,
       5716, WRS970::lopCustomPrompt,
       5732, WRS970::lopRespondNow,
       5746, WRS970::lopReturnKeypad,
       5762, WRS970::mtDisabled,
       5773, WRS970::mtBaseAddress,
       5787, WRS970::mtBaseID,
       5796, WRS970::mtKeyBeep,
       5806, WRS970::mtOpMode,
       5815, WRS970::mtContrast,
       5826, WRS970::onTwoSeconds,
       5839, WRS970::onThreeSeconds,
       5854, WRS970::onFourSeconds,
       5868, WRS970::onFiveSeconds,
       5882, WRS970::opNormal,
       5891, WRS970::opOnKeypress,
       5904, WRS970::opOnAcknowledged,
       5921, WRS970::pngOff,
       5928, WRS970::pngFive,
       5936, WRS970::PngTen,
       5943, WRS970::PngFifteen,
       5954, WRS970::pwrTen,
       5961, WRS970::pwrTwenty,
       5971, WRS970::pwrThirty,
       5981, WRS970::pwrForty,

        0        // eod
};

static const char qt_meta_enumstringdata_WRS970[] = {
    "TAddressMode\0TAnswerType\0TBand\0TBasePowerLevel\0TCommType\0TLineOnePrompt\0TMenuAccess\0TOnTimer\0TOpMode\0TPingTimer\0TPowerTimer\0"
    "addrDynamic\0addrStatic\0"
    "atSingleAlpha\0"
    "atSingleDigit\0atYesNo\0atYesAbstainNo\0atAgreeDisagree\0atLowMedHigh\0atTrueFalse\0atMomentToMoment\0atMultiAlphaNumeric\0atNegativePlus\0atCustomSoftKeys\0"
    "bndNone\0bndLowMid\0bndLowHigh\0bndMidHigh\0bndLow\0bndMid\0"
    "bndHigh\0"
    "pwrLow\0pwrMid\0pwrHigh\0pwrEuroMax\0pwrUSMax\0"
    "ctUndefined\0ctTCP\0ctUSB\0"
    "lopBlank\0lopVoteNow\0lopSystemIdle\0lopThankYou\0lopWelcome\0lopChooseAgain\0lopVoteEnded\0lopBreakTime\0lopQuestions\0lopHello\0lopPleaseVote\0"
    "lopTimeIsUp\0lopManyThanks\0lopQuestionNumber\0lopCustomPrompt\0lopRespondNow\0lopReturnKeypad\0"
    "mtDisabled\0mtBaseAddress\0mtBaseID\0mtKeyBeep\0mtOpMode\0mtContrast\0"
    "onTwoSeconds\0onThreeSeconds\0onFourSeconds\0onFiveSeconds\0"
    ""
    "opNormal\0opOnKeypress\0opOnAcknowledged\0"
    "pngOff\0pngFive\0PngTen\0PngFifteen\0"
    "pwrTen\0pwrTwenty\0pwrThirty\0pwrForty\0"

};

static const char *qt_meta_stringdata_WRS970__IWRS970X() {
    static const char stringdata0[] = {
    "WRS970::IWRS970X\0"
    "exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AddKeypad(QString)\0SerialNumber\0bool\0\0AddKeypadByID(QString)\0Keypads\0"
    "bool\0\0AddStaticKeypad(QString,int,bool)\0SerialNumber,KeypadID,Overwrite\0bool\0\0BeginQuestion(int,TAnswerType)\0QuestionNumber,AnswerType\0\0\0BeginQuestionAnswer(int,TAnswerType,QString)\0QuestionNumber,AnswerType,Answer\0"
    "\0\0BeginQuestionPrompt(TLineOnePrompt,int,TAnswerType,QString)\0LineOnePrompt,QuestionNumber,AnswerType,Answer\0\0\0ClearDataBuffer()\0\0\0\0ClearKeypadList()\0\0\0\0Connect(QString)\0SerialNumber\0\0\0Disconnect()\0\0\0\0"
    "DrawTextBiDiModeFlagsReadingOnly()\0\0int\0\0GetAvailableBases(bool)\0WithDescription\0QString\0\0GetBaseInfo()\0\0\0\0GetTCPBases(bool)\0WithDescription\0QVariant\0\0InitiateAction()\0\0\0\0IsKeypadInList(QString)\0SerialNumber\0"
    "bool\0\0IsRightToLeft()\0\0bool\0\0KeypadLoginResult(QString,bool)\0SerialNumber,Passed\0\0\0LockKeys(QString)\0Keys\0\0\0LogoutAllKeypads()\0\0\0\0LogoutKeypad(int)\0Address\0\0\0Paint()\0\0\0\0RemoveKeypad(QString)\0SerialNumber\0"
    "\0\0RemoveKeypadByID(QString)\0Keypads\0bool\0\0RemoveStaticKeypad(int)\0KeypadID\0\0\0SendMsgByID(int,QString)\0KeypadID,KeypadMessage\0\0\0SendMsgBySerial(QString,QString)\0SerialNumber,Message\0\0\0SetAddressMode(TAddressMode)\0"
    "AddressMode\0\0\0SetAlignWithMargins(bool)\0AlignWithMargins\0\0\0SetAnswerPeriod(int)\0AnswerPeriod\0\0\0SetAuthentication(bool)\0Authentication\0\0\0SetAutoConnect(bool)\0AutoConnect\0\0\0SetAutomateQuestionNumber(bool)\0"
    "AutomateQuestionNumber\0\0\0SetAvoidWifi(TBand)\0AvoidWifi\0\0\0SetBaseChannel(int)\0BaseChannel\0\0\0SetBaseName(QString)\0BaseName\0\0\0SetBeepKeypads(bool)\0BeepKeypads\0\0\0SetCommType(TCommType)\0CommType\0\0\0SetCommunicationTimeout(int)\0"
    "CommunicationTimeout\0\0\0SetCustomMessage(QString)\0CustomMessage\0\0\0SetCustomSoftKeys(QString)\0CustomSoftKeys\0\0\0SetDebugEnabled(bool)\0DebugEnabled\0\0\0SetDesignVisible(bool)\0Value\0\0\0SetDockSite(bool)\0DockSite\0"
    "\0\0SetDoubleBuffered(bool)\0DoubleBuffered\0\0\0SetEnabled(bool)\0Enabled\0\0\0SetErrorsEnabled(bool)\0ErrorsEnabled\0\0\0SetExceptionsEnabled(bool)\0ExceptionsEnabled\0\0\0SetForceMenu(bool)\0ForceMenu\0\0\0SetHideAntennaIcon(bool)\0"
    "HideAntennaIcon\0\0\0SetHideBatteryIcon(bool)\0HideBatteryIcon\0\0\0SetKeyLockFeedback(bool)\0KeyLockFeedback\0\0\0SetKeypadAlertEnabled(bool)\0KeypadAlertEnabled\0\0\0SetKeypadBacklight(bool)\0KeypadBacklight\0\0\0SetKeypadBacklightOnTimer(TOnTimer)\0"
    "KeypadBacklightOnTimer\0\0\0SetKeypadBacklightOpMethod(TOpMode)\0KeypadBacklightOpMethod\0\0\0SetKeypadHideVote(bool)\0KeypadHideVote\0\0\0SetKeypadLoginEnabled(bool)\0KeypadLoginEnabled\0\0\0SetKeypadLowBatteryNotification(bool)\0"
    "KeypadLowBatteryNotification\0\0\0SetKeypadPowerTimer(TPowerTimer)\0KeypadPowerTimer\0\0\0SetKeypadsOutOfRange(bool)\0KeypadsOutOfRange\0\0\0SetKeypadsPowerDown(bool)\0KeypadsPowerDown\0\0\0SetMaxKeypadsAllowed(int)\0"
    "MaxKeypadsAllowed\0\0\0SetMenuAccess(TMenuAccess)\0MenuAccess\0\0\0SetMessagePeriod(int)\0MessagePeriod\0\0\0SetMsgAckEnabled(bool)\0MsgAckEnabled\0\0\0SetPingTimer(TPingTimer)\0PingTimer\0\0\0SetPowerKeyDisabled(bool)\0PowerKeyDisabled\0"
    "\0\0SetPowerLevel(TBasePowerLevel)\0PowerLevel\0\0\0SetReceiveArrowOnAnyBase(bool)\0ReceiveArrowOnAnyBase\0\0\0SetSMSEntry(bool)\0SMSEntry\0\0\0SetSMSVoteTimeout(int)\0SMSVoteTimeout\0\0\0SetScrollFaster(bool)\0ScrollFaster\0"
    "\0\0SetSecureLogin(bool)\0SecureLogin\0\0\0SetSeqLinkPackets(int)\0SeqLinkPackets\0\0\0SetSession(QString,int)\0SessionName,SessionGroup\0\0\0SetShowAnswer(bool)\0ShowAnswer\0\0\0SetShowReceived(bool)\0ShowReceived\0\0\0SetShowSending(bool)\0"
    "ShowSending\0\0\0SetSubComponent(bool)\0IsSubComponent\0\0\0SetTCPAddress(QString)\0TCPAddress\0\0\0SetTCPPort(int)\0TCPPort\0\0\0SetUseDockManager(bool)\0UseDockManager\0\0\0SetVersion3(bool)\0Version3\0\0\0SetVisible(bool)\0"
    "Visible\0\0\0UnlockKeys(QString)\0Keys\0\0\0UseRightToLeftReading()\0\0bool\0\0UseRightToLeftScrollBar()\0\0bool\0\0"
    "AddressMode\0TAddressMode\0AlignDisabled\0bool\0AlignWithMargins\0bool\0AnswerPeriod\0int\0Authentication\0bool\0"
    "AutoConnect\0bool\0AutomateQuestionNumber\0bool\0AvoidWifi\0TBand\0BaseChannel\0int\0BaseName\0QString\0BaseSerial\0QString\0BaseVersion\0QString\0BeepKeypads\0bool\0CommType\0TCommType\0CommunicationTimeout\0int\0Connected\0"
    "bool\0ControlVersion\0QString\0CustomMessage\0QString\0CustomSoftKeys\0QString\0DebugEnabled\0bool\0DockSite\0bool\0DoubleBuffered\0bool\0Enabled\0bool\0ErrorsEnabled\0bool\0ExceptionsEnabled\0bool\0ExplicitHeight\0int\0ExplicitLeft\0"
    "int\0ExplicitTop\0int\0ExplicitWidth\0int\0ForceMenu\0bool\0HideAntennaIcon\0bool\0HideBatteryIcon\0bool\0KeyLockFeedback\0bool\0KeypadAlertEnabled\0bool\0KeypadBacklight\0bool\0KeypadBacklightOnTimer\0TOnTimer\0KeypadBacklightOpMethod\0"
    "TOpMode\0KeypadHideVote\0bool\0KeypadList\0QString\0KeypadListCount\0int\0KeypadLoginEnabled\0bool\0KeypadLowBatteryNotification\0bool\0KeypadPowerTimer\0TPowerTimer\0KeypadsOutOfRange\0bool\0KeypadsPowerDown\0bool\0MaxKeypadsAllowed\0"
    "int\0MenuAccess\0TMenuAccess\0MessagePeriod\0int\0Model\0QString\0MouseInClient\0bool\0MsgAckEnabled\0bool\0PingTimer\0TPingTimer\0PowerKeyDisabled\0bool\0PowerLevel\0TBasePowerLevel\0ReceiveArrowOnAnyBase\0bool\0SMSEntry\0"
    "bool\0SMSVoteTimeout\0int\0ScrollFaster\0bool\0SecureLogin\0bool\0SeqLinkPackets\0int\0ShowAnswer\0bool\0ShowReceived\0bool\0ShowSending\0bool\0TCPAddress\0QString\0TCPPort\0int\0UseDockManager\0bool\0Version3\0bool\0Visible\0"
    "bool\0VisibleDockClientCount\0int\0control\0QString\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_WRS970)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_WRS970, sizeof(qt_meta_enumstringdata_WRS970));
    }

    return data;
};

const QMetaObject IWRS970X::staticMetaObject = {
{ &QObject::staticMetaObject,
qt_meta_stringdata_WRS970__IWRS970X(),
qt_meta_data_WRS970__IWRS970X }
};

void *IWRS970X::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_WRS970__IWRS970X()))
        return static_cast<void*>(const_cast<IWRS970X*>(this));
    return QAxObject::qt_metacast(_clname);
}

static const uint qt_meta_data_WRS970__WRS970X[] = {

 // content:
       1,       // revision
       0,       // classname
       2,    10, // classinfo
       107,    14, // methods
       69,    549, // properties
       11,    756, // enums/sets

 // classinfo: key, value
       16, 34, 
       49, 61, 

 // signals: signature, parameters, type, tag, flags
       70, 87, 92, 93, 5,
       94, 121, 143, 144, 5,
       145, 162, 167, 168, 5,
       169, 196, 218, 219, 5,
       220, 278, 363, 364, 5,
       365, 423, 482, 483, 5,
       484, 515, 533, 534, 5,
       535, 567, 589, 590, 5,
       591, 622, 635, 636, 5,
       637, 663, 685, 686, 5,
       687, 722, 754, 755, 5,
       756, 789, 811, 812, 5,
       813, 839, 861, 862, 5,
       863, 905, 945, 946, 5,
       947, 985, 1018, 1019, 5,
       1020, 1067, 1105, 1106, 5,
       1107, 1146, 1168, 1169, 5,
       1170, 1195, 1200, 1201, 5,
       1202, 1228, 1243, 1244, 5,

 // slots: signature, parameters, type, tag, flags
       1245, 1264, 1277, 1282, 9,
       1283, 1306, 1314, 1319, 9,
       1320, 1354, 1386, 1391, 9,
       1392, 1423, 1449, 1450, 9,
       1451, 1496, 1529, 1530, 9,
       1531, 1591, 1638, 1639, 9,
       1640, 1658, 1659, 1660, 9,
       1661, 1679, 1680, 1681, 9,
       1682, 1699, 1712, 1713, 9,
       1714, 1727, 1728, 1729, 9,
       1730, 1765, 1766, 1770, 9,
       1771, 1795, 1811, 1819, 9,
       1820, 1834, 1835, 1836, 9,
       1837, 1855, 1871, 1880, 9,
       1881, 1898, 1899, 1900, 9,
       1901, 1925, 1938, 1943, 9,
       1944, 1960, 1961, 1966, 9,
       1967, 1999, 2019, 2020, 9,
       2021, 2039, 2044, 2045, 9,
       2046, 2065, 2066, 2067, 9,
       2068, 2086, 2094, 2095, 9,
       2096, 2104, 2105, 2106, 9,
       2107, 2129, 2142, 2143, 9,
       2144, 2170, 2178, 2183, 9,
       2184, 2208, 2217, 2218, 9,
       2219, 2244, 2267, 2268, 9,
       2269, 2302, 2323, 2324, 9,
       2325, 2354, 2366, 2367, 9,
       2368, 2394, 2411, 2412, 9,
       2413, 2434, 2447, 2448, 9,
       2449, 2473, 2488, 2489, 9,
       2490, 2511, 2523, 2524, 9,
       2525, 2557, 2580, 2581, 9,
       2582, 2602, 2612, 2613, 9,
       2614, 2634, 2646, 2647, 9,
       2648, 2669, 2678, 2679, 9,
       2680, 2701, 2713, 2714, 9,
       2715, 2738, 2747, 2748, 9,
       2749, 2778, 2799, 2800, 9,
       2801, 2827, 2841, 2842, 9,
       2843, 2870, 2885, 2886, 9,
       2887, 2909, 2922, 2923, 9,
       2924, 2947, 2953, 2954, 9,
       2955, 2973, 2982, 2983, 9,
       2984, 3008, 3023, 3024, 9,
       3025, 3042, 3050, 3051, 9,
       3052, 3075, 3089, 3090, 9,
       3091, 3118, 3136, 3137, 9,
       3138, 3157, 3167, 3168, 9,
       3169, 3194, 3210, 3211, 9,
       3212, 3237, 3253, 3254, 9,
       3255, 3280, 3296, 3297, 9,
       3298, 3326, 3345, 3346, 9,
       3347, 3372, 3388, 3389, 9,
       3390, 3426, 3449, 3450, 9,
       3451, 3487, 3511, 3512, 9,
       3513, 3537, 3552, 3553, 9,
       3554, 3582, 3601, 3602, 9,
       3603, 3641, 3670, 3671, 9,
       3672, 3705, 3722, 3723, 9,
       3724, 3751, 3769, 3770, 9,
       3771, 3797, 3814, 3815, 9,
       3816, 3842, 3860, 3861, 9,
       3862, 3889, 3900, 3901, 9,
       3902, 3924, 3938, 3939, 9,
       3940, 3963, 3977, 3978, 9,
       3979, 4004, 4014, 4015, 9,
       4016, 4042, 4059, 4060, 9,
       4061, 4092, 4103, 4104, 9,
       4105, 4136, 4158, 4159, 9,
       4160, 4178, 4187, 4188, 9,
       4189, 4212, 4227, 4228, 9,
       4229, 4251, 4264, 4265, 9,
       4266, 4287, 4299, 4300, 9,
       4301, 4324, 4339, 4340, 9,
       4341, 4365, 4390, 4391, 9,
       4392, 4412, 4423, 4424, 9,
       4425, 4447, 4460, 4461, 9,
       4462, 4483, 4495, 4496, 9,
       4497, 4519, 4534, 4535, 9,
       4536, 4559, 4570, 4571, 9,
       4572, 4588, 4596, 4597, 9,
       4598, 4622, 4637, 4638, 9,
       4639, 4657, 4666, 4667, 9,
       4668, 4685, 4693, 4694, 9,
       4695, 4715, 4720, 4721, 9,
       4722, 4746, 4747, 4752, 9,
       4753, 4779, 4780, 4785, 9,

 // properties: name, type, flags
       4786, 4798, 0x0201500b, 		 // TAddressMode AddressMode
       4811, 4825, 0x01004001, 		 // bool AlignDisabled
       4830, 4847, 0x01014003, 		 // bool AlignWithMargins
       4852, 4865, 0x02014003, 		 // int AnswerPeriod
       4869, 4884, 0x01015003, 		 // bool Authentication
       4889, 4901, 0x01015003, 		 // bool AutoConnect
       4906, 4929, 0x01015003, 		 // bool AutomateQuestionNumber
       4934, 4944, 0x0201500b, 		 // TBand AvoidWifi
       4950, 4962, 0x02015003, 		 // int BaseChannel
       4966, 4975, 0x0a014003, 		 // QString BaseName
       4983, 4994, 0x0a004001, 		 // QString BaseSerial
       5002, 5014, 0x0a004001, 		 // QString BaseVersion
       5022, 5034, 0x01014003, 		 // bool BeepKeypads
       5039, 5048, 0x0201500b, 		 // TCommType CommType
       5058, 5079, 0x02015003, 		 // int CommunicationTimeout
       5083, 5093, 0x01004001, 		 // bool Connected
       5098, 5113, 0x0a005001, 		 // QString ControlVersion
       5121, 5135, 0x0a014003, 		 // QString CustomMessage
       5143, 5158, 0x0a015003, 		 // QString CustomSoftKeys
       5166, 5179, 0x01015003, 		 // bool DebugEnabled
       5184, 5193, 0x01014003, 		 // bool DockSite
       5198, 5213, 0x01014003, 		 // bool DoubleBuffered
       5218, 5226, 0x01014003, 		 // bool Enabled
       5231, 5245, 0x01015003, 		 // bool ErrorsEnabled
       5250, 5268, 0x01015003, 		 // bool ExceptionsEnabled
       5273, 5288, 0x02004001, 		 // int ExplicitHeight
       5292, 5305, 0x02004001, 		 // int ExplicitLeft
       5309, 5321, 0x02004001, 		 // int ExplicitTop
       5325, 5339, 0x02004001, 		 // int ExplicitWidth
       5343, 5353, 0x01014003, 		 // bool ForceMenu
       5358, 5374, 0x01015003, 		 // bool HideAntennaIcon
       5379, 5395, 0x01015003, 		 // bool HideBatteryIcon
       5400, 5416, 0x01015003, 		 // bool KeyLockFeedback
       5421, 5440, 0x01015003, 		 // bool KeypadAlertEnabled
       5445, 5461, 0x01015003, 		 // bool KeypadBacklight
       5466, 5489, 0x0201500b, 		 // TOnTimer KeypadBacklightOnTimer
       5498, 5522, 0x0201500b, 		 // TOpMode KeypadBacklightOpMethod
       5530, 5545, 0x01015003, 		 // bool KeypadHideVote
       5550, 5561, 0x0a004001, 		 // QString KeypadList
       5569, 5585, 0x02004001, 		 // int KeypadListCount
       5589, 5608, 0x01015003, 		 // bool KeypadLoginEnabled
       5613, 5642, 0x01015003, 		 // bool KeypadLowBatteryNotification
       5647, 5664, 0x0201500b, 		 // TPowerTimer KeypadPowerTimer
       5676, 5694, 0x01015003, 		 // bool KeypadsOutOfRange
       5699, 5716, 0x01014003, 		 // bool KeypadsPowerDown
       5721, 5739, 0x02015003, 		 // int MaxKeypadsAllowed
       5743, 5754, 0x0201500b, 		 // TMenuAccess MenuAccess
       5766, 5780, 0x02014003, 		 // int MessagePeriod
       5784, 5790, 0x0a005001, 		 // QString Model
       5798, 5812, 0x01004001, 		 // bool MouseInClient
       5817, 5831, 0x01015003, 		 // bool MsgAckEnabled
       5836, 5846, 0x0201500b, 		 // TPingTimer PingTimer
       5857, 5874, 0x01015003, 		 // bool PowerKeyDisabled
       5879, 5890, 0x0201500b, 		 // TBasePowerLevel PowerLevel
       5906, 5928, 0x01015003, 		 // bool ReceiveArrowOnAnyBase
       5933, 5942, 0x01015003, 		 // bool SMSEntry
       5947, 5962, 0x02015003, 		 // int SMSVoteTimeout
       5966, 5979, 0x01015003, 		 // bool ScrollFaster
       5984, 5996, 0x01015003, 		 // bool SecureLogin
       6001, 6016, 0x02014003, 		 // int SeqLinkPackets
       6020, 6031, 0x01014003, 		 // bool ShowAnswer
       6036, 6049, 0x01015003, 		 // bool ShowReceived
       6054, 6066, 0x01015003, 		 // bool ShowSending
       6071, 6082, 0x0a015003, 		 // QString TCPAddress
       6090, 6098, 0x02015003, 		 // int TCPPort
       6102, 6117, 0x01014003, 		 // bool UseDockManager
       6122, 6131, 0x01015003, 		 // bool Version3
       6136, 6144, 0x01014003, 		 // bool Visible
       6149, 6172, 0x02004001, 		 // int VisibleDockClientCount

 // enums: name, flags, count, data
       6176, 0x0, 2, 800, 
       6189, 0x0, 11, 804, 
       6201, 0x0, 7, 826, 
       6207, 0x0, 5, 840, 
       6223, 0x0, 3, 850, 
       6233, 0x0, 17, 856, 
       6248, 0x0, 6, 890, 
       6260, 0x0, 4, 902, 
       6269, 0x0, 3, 910, 
       6277, 0x0, 4, 916, 
       6288, 0x0, 4, 924, 

 // enum data: key, value
       6300, WRS970::addrDynamic,
       6312, WRS970::addrStatic,
       6323, WRS970::atSingleAlpha,
       6337, WRS970::atSingleDigit,
       6351, WRS970::atYesNo,
       6359, WRS970::atYesAbstainNo,
       6374, WRS970::atAgreeDisagree,
       6390, WRS970::atLowMedHigh,
       6403, WRS970::atTrueFalse,
       6415, WRS970::atMomentToMoment,
       6432, WRS970::atMultiAlphaNumeric,
       6452, WRS970::atNegativePlus,
       6467, WRS970::atCustomSoftKeys,
       6484, WRS970::bndNone,
       6492, WRS970::bndLowMid,
       6502, WRS970::bndLowHigh,
       6513, WRS970::bndMidHigh,
       6524, WRS970::bndLow,
       6531, WRS970::bndMid,
       6538, WRS970::bndHigh,
       6546, WRS970::pwrLow,
       6553, WRS970::pwrMid,
       6560, WRS970::pwrHigh,
       6568, WRS970::pwrEuroMax,
       6579, WRS970::pwrUSMax,
       6588, WRS970::ctUndefined,
       6600, WRS970::ctTCP,
       6606, WRS970::ctUSB,
       6612, WRS970::lopBlank,
       6621, WRS970::lopVoteNow,
       6632, WRS970::lopSystemIdle,
       6646, WRS970::lopThankYou,
       6658, WRS970::lopWelcome,
       6669, WRS970::lopChooseAgain,
       6684, WRS970::lopVoteEnded,
       6697, WRS970::lopBreakTime,
       6710, WRS970::lopQuestions,
       6723, WRS970::lopHello,
       6732, WRS970::lopPleaseVote,
       6746, WRS970::lopTimeIsUp,
       6758, WRS970::lopManyThanks,
       6772, WRS970::lopQuestionNumber,
       6790, WRS970::lopCustomPrompt,
       6806, WRS970::lopRespondNow,
       6820, WRS970::lopReturnKeypad,
       6836, WRS970::mtDisabled,
       6847, WRS970::mtBaseAddress,
       6861, WRS970::mtBaseID,
       6870, WRS970::mtKeyBeep,
       6880, WRS970::mtOpMode,
       6889, WRS970::mtContrast,
       6900, WRS970::onTwoSeconds,
       6913, WRS970::onThreeSeconds,
       6928, WRS970::onFourSeconds,
       6942, WRS970::onFiveSeconds,
       6956, WRS970::opNormal,
       6965, WRS970::opOnKeypress,
       6978, WRS970::opOnAcknowledged,
       6995, WRS970::pngOff,
       7002, WRS970::pngFive,
       7010, WRS970::PngTen,
       7017, WRS970::PngFifteen,
       7028, WRS970::pwrTen,
       7035, WRS970::pwrTwenty,
       7045, WRS970::pwrThirty,
       7055, WRS970::pwrForty,

        0        // eod
};

static const char *qt_meta_stringdata_WRS970__WRS970X() {
    static const char stringdata0[] = {
    "WRS970::WRS970X\0"
    "Event Interface 1\0IWRS970XEvents\0Interface 0\0IWRS970X\0"
    "OnDebug(QString)\0Data\0\0\0OnDuplicateID(QString,int)\0SerialNumber,KeypadID\0\0\0OnError(QString)\0Data\0\0\0OnKeypadAlert(QString,int)\0SerialNumber,KeypadID\0"
    "\0\0OnKeypadData(QString,int,int,QString,int,QString,int,int)\0SerialNumber,KeypadID,TimeStamp,Version,BatteryLevel,Value,QuestionNumber,KeypadType\0\0\0OnKeypadDataReceived(QString,int,int,QString,int,QString)\0"
    "SerialNumber,KeypadID,TimeStamp,Version,BatteryLevel,Value\0\0\0OnKeypadLogin(QString,QString)\0SerialNumber,Data\0\0\0OnKeypadMsgTimeout(QString,int)\0SerialNumber,KeypadID\0\0\0OnKeypadNotAuthorized(QString)\0SerialNumber\0"
    "\0\0OnKeypadPing(QString,int)\0SerialNumber,KeypadID\0\0\0OnKeypadTimestamp(QString,int,int)\0SerialNumber,KeypadID,TimeStamp\0\0\0OnLowBatteryWarning(QString,int)\0SerialNumber,KeypadID\0\0\0OnMessageAck(QString,int)\0"
    "SerialNumber,KeypadID\0\0\0OnMomentToMoment(QString,int,int,QString)\0SerialNumber,KeypadID,BatteryLevel,Data\0\0\0OnSMSVoteTimeout(QString,int,QString)\0SerialNumber,QuestionNumber,Vote\0\0\0OnSoftKeyDataReceived(QString,int,QString,int)\0"
    "SerialNumber,KeypadID,Value,TimeStamp\0\0\0exception(int,QString,QString,QString)\0code,source,disc,help\0\0\0propertyChanged(QString)\0name\0\0\0signal(QString,int,void*)\0name,argc,argv\0\0\0"
    "AddKeypad(QString)\0SerialNumber\0"
    "bool\0\0AddKeypadByID(QString)\0Keypads\0bool\0\0AddStaticKeypad(QString,int,bool)\0SerialNumber,KeypadID,Overwrite\0bool\0\0BeginQuestion(int,TAnswerType)\0QuestionNumber,AnswerType\0\0\0BeginQuestionAnswer(int,TAnswerType,QString)\0"
    "QuestionNumber,AnswerType,Answer\0\0\0BeginQuestionPrompt(TLineOnePrompt,int,TAnswerType,QString)\0LineOnePrompt,QuestionNumber,AnswerType,Answer\0\0\0ClearDataBuffer()\0\0\0\0ClearKeypadList()\0\0\0\0Connect(QString)\0"
    "SerialNumber\0\0\0Disconnect()\0\0\0\0DrawTextBiDiModeFlagsReadingOnly()\0\0int\0\0GetAvailableBases(bool)\0WithDescription\0QString\0\0GetBaseInfo()\0\0\0\0GetTCPBases(bool)\0WithDescription\0QVariant\0\0InitiateAction()\0\0\0"
    "\0IsKeypadInList(QString)\0SerialNumber\0bool\0\0IsRightToLeft()\0\0bool\0\0KeypadLoginResult(QString,bool)\0SerialNumber,Passed\0\0\0LockKeys(QString)\0Keys\0\0\0LogoutAllKeypads()\0\0\0\0LogoutKeypad(int)\0Address\0\0\0Paint()\0"
    "\0\0\0RemoveKeypad(QString)\0SerialNumber\0\0\0RemoveKeypadByID(QString)\0Keypads\0bool\0\0RemoveStaticKeypad(int)\0KeypadID\0\0\0SendMsgByID(int,QString)\0KeypadID,KeypadMessage\0\0\0SendMsgBySerial(QString,QString)\0SerialNumber,Message\0"
    "\0\0SetAddressMode(TAddressMode)\0AddressMode\0\0\0SetAlignWithMargins(bool)\0AlignWithMargins\0\0\0SetAnswerPeriod(int)\0AnswerPeriod\0\0\0SetAuthentication(bool)\0Authentication\0\0\0SetAutoConnect(bool)\0AutoConnect\0\0"
    "\0SetAutomateQuestionNumber(bool)\0AutomateQuestionNumber\0\0\0SetAvoidWifi(TBand)\0AvoidWifi\0\0\0SetBaseChannel(int)\0BaseChannel\0\0\0SetBaseName(QString)\0BaseName\0\0\0SetBeepKeypads(bool)\0BeepKeypads\0\0\0SetCommType(TCommType)\0"
    "CommType\0\0\0SetCommunicationTimeout(int)\0CommunicationTimeout\0\0\0SetCustomMessage(QString)\0CustomMessage\0\0\0SetCustomSoftKeys(QString)\0CustomSoftKeys\0\0\0SetDebugEnabled(bool)\0DebugEnabled\0\0\0SetDesignVisible(bool)\0"
    "Value\0\0\0SetDockSite(bool)\0DockSite\0\0\0SetDoubleBuffered(bool)\0DoubleBuffered\0\0\0SetEnabled(bool)\0Enabled\0\0\0SetErrorsEnabled(bool)\0ErrorsEnabled\0\0\0SetExceptionsEnabled(bool)\0ExceptionsEnabled\0\0\0SetForceMenu(bool)\0"
    "ForceMenu\0\0\0SetHideAntennaIcon(bool)\0HideAntennaIcon\0\0\0SetHideBatteryIcon(bool)\0HideBatteryIcon\0\0\0SetKeyLockFeedback(bool)\0KeyLockFeedback\0\0\0SetKeypadAlertEnabled(bool)\0KeypadAlertEnabled\0\0\0SetKeypadBacklight(bool)\0"
    "KeypadBacklight\0\0\0SetKeypadBacklightOnTimer(TOnTimer)\0KeypadBacklightOnTimer\0\0\0SetKeypadBacklightOpMethod(TOpMode)\0KeypadBacklightOpMethod\0\0\0SetKeypadHideVote(bool)\0KeypadHideVote\0\0\0SetKeypadLoginEnabled(bool)\0"
    "KeypadLoginEnabled\0\0\0SetKeypadLowBatteryNotification(bool)\0KeypadLowBatteryNotification\0\0\0SetKeypadPowerTimer(TPowerTimer)\0KeypadPowerTimer\0\0\0SetKeypadsOutOfRange(bool)\0KeypadsOutOfRange\0\0\0SetKeypadsPowerDown(bool)\0"
    "KeypadsPowerDown\0\0\0SetMaxKeypadsAllowed(int)\0MaxKeypadsAllowed\0\0\0SetMenuAccess(TMenuAccess)\0MenuAccess\0\0\0SetMessagePeriod(int)\0MessagePeriod\0\0\0SetMsgAckEnabled(bool)\0MsgAckEnabled\0\0\0SetPingTimer(TPingTimer)\0"
    "PingTimer\0\0\0SetPowerKeyDisabled(bool)\0PowerKeyDisabled\0\0\0SetPowerLevel(TBasePowerLevel)\0PowerLevel\0\0\0SetReceiveArrowOnAnyBase(bool)\0ReceiveArrowOnAnyBase\0\0\0SetSMSEntry(bool)\0SMSEntry\0\0\0SetSMSVoteTimeout(int)\0"
    "SMSVoteTimeout\0\0\0SetScrollFaster(bool)\0ScrollFaster\0\0\0SetSecureLogin(bool)\0SecureLogin\0\0\0SetSeqLinkPackets(int)\0SeqLinkPackets\0\0\0SetSession(QString,int)\0SessionName,SessionGroup\0\0\0SetShowAnswer(bool)\0ShowAnswer\0"
    "\0\0SetShowReceived(bool)\0ShowReceived\0\0\0SetShowSending(bool)\0ShowSending\0\0\0SetSubComponent(bool)\0IsSubComponent\0\0\0SetTCPAddress(QString)\0TCPAddress\0\0\0SetTCPPort(int)\0TCPPort\0\0\0SetUseDockManager(bool)\0UseDockManager\0"
    "\0\0SetVersion3(bool)\0Version3\0\0\0SetVisible(bool)\0Visible\0\0\0UnlockKeys(QString)\0Keys\0\0\0UseRightToLeftReading()\0\0bool\0\0UseRightToLeftScrollBar()\0\0bool\0\0"
    "AddressMode\0TAddressMode\0AlignDisabled\0bool\0AlignWithMargins\0"
    "bool\0AnswerPeriod\0int\0Authentication\0bool\0AutoConnect\0bool\0AutomateQuestionNumber\0bool\0AvoidWifi\0TBand\0BaseChannel\0int\0BaseName\0QString\0BaseSerial\0QString\0BaseVersion\0QString\0BeepKeypads\0bool\0CommType\0"
    "TCommType\0CommunicationTimeout\0int\0Connected\0bool\0ControlVersion\0QString\0CustomMessage\0QString\0CustomSoftKeys\0QString\0DebugEnabled\0bool\0DockSite\0bool\0DoubleBuffered\0bool\0Enabled\0bool\0ErrorsEnabled\0bool\0"
    "ExceptionsEnabled\0bool\0ExplicitHeight\0int\0ExplicitLeft\0int\0ExplicitTop\0int\0ExplicitWidth\0int\0ForceMenu\0bool\0HideAntennaIcon\0bool\0HideBatteryIcon\0bool\0KeyLockFeedback\0bool\0KeypadAlertEnabled\0bool\0KeypadBacklight\0"
    "bool\0KeypadBacklightOnTimer\0TOnTimer\0KeypadBacklightOpMethod\0TOpMode\0KeypadHideVote\0bool\0KeypadList\0QString\0KeypadListCount\0int\0KeypadLoginEnabled\0bool\0KeypadLowBatteryNotification\0bool\0KeypadPowerTimer\0"
    "TPowerTimer\0KeypadsOutOfRange\0bool\0KeypadsPowerDown\0bool\0MaxKeypadsAllowed\0int\0MenuAccess\0TMenuAccess\0MessagePeriod\0int\0Model\0QString\0MouseInClient\0bool\0MsgAckEnabled\0bool\0PingTimer\0TPingTimer\0PowerKeyDisabled\0"
    "bool\0PowerLevel\0TBasePowerLevel\0ReceiveArrowOnAnyBase\0bool\0SMSEntry\0bool\0SMSVoteTimeout\0int\0ScrollFaster\0bool\0SecureLogin\0bool\0SeqLinkPackets\0int\0ShowAnswer\0bool\0ShowReceived\0bool\0ShowSending\0bool\0TCPAddress\0"
    "QString\0TCPPort\0int\0UseDockManager\0bool\0Version3\0bool\0Visible\0bool\0VisibleDockClientCount\0int\0"
    };
    static char data[sizeof(stringdata0) + sizeof(qt_meta_enumstringdata_WRS970)];
    if (!data[0]) {
        int index = 0;
        memcpy(data + index, stringdata0, sizeof(stringdata0) - 1);
        index += sizeof(stringdata0) - 1;
        memcpy(data + index, qt_meta_enumstringdata_WRS970, sizeof(qt_meta_enumstringdata_WRS970));
    }

    return data;
};

const QMetaObject WRS970X::staticMetaObject = {
{ &QWidget::staticMetaObject,
qt_meta_stringdata_WRS970__WRS970X(),
qt_meta_data_WRS970__WRS970X }
};

void *WRS970X::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_WRS970__WRS970X()))
        return static_cast<void*>(const_cast<WRS970X*>(this));
    return QAxWidget::qt_metacast(_clname);
}

